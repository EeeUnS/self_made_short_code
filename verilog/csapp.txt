
기본적으로 리눅스를 기준으로 한다.

중간중간 컴구와 겹친다는 내용을 언급할텐데 
구체적인 참고 책은 computer architecture a quantitative approach이다.

1 컴퓨터 시스템으로의 여행

책 개론

프로그램의 구조와 실행

2 정보의 표현과 처리
실제 컴퓨터에서 데이터(2진수로 되어있음)가 어떻게 되어있는지 알려줌
세부적으로는 정수,부동소수점이 어떻게 돌아가는지로
2의 보수 이런 내용이 주.
그리고 비트연산자를 응용하는게 많이 나옴. 
보통 학과에서 컴퓨터개론(?)때 듣는 내용


3 프로그램의 기계수준 표현.

x86-64 어셈블리어를 배운다.
실제 C코드를 어셈블해서 비교하거나 연습문제로 어셈블리어를 보고 C코드를 짜는 짓도한다.
또한 C,어셈까지 내려간상태에서 오버플로우로인한 보안취약점도 조금 다뤄준다.

4 프로세서 구조
컴구의 cpu내용과 같다.컴구와 겹치는 부분
디지털 회로의 간단한 내용과 HCL을 가르쳐주고 실제 간단한 cpu설계를 한다.(코드로 직접 구현한것을 보여주진 않는다. 연습문제로는 있음)
설계를 간편하기 위해서 3장에서본 x86-64을 간소화한 y86-64을 정의해서 이를 구현한다.
파이프라인,해저드까지 설명이 되어있다.

5 프로그램 성능 최적화하기
컴구와 내용이 상당히 겹친다.
하드웨어,컴파일러상에서 최적화를 어떻게하는지가 주
또한 코드를 짤때 같은 동작이라도 조금 더 빨리? 지역성을 고려하는법 정도

컴파일러의 동작

6 메모리 계층 구조
컴구와 같은 내용

메모리 계층 구조와 캐시의 작동 방식에 대해서 가르쳐준다.
각 저장 장치에 대한 설명.
캐시친화적으로 빠르게 코딩하는방식도 알려준다.

시스템에서 프로그램의 실행

7 링커
어셈블러로 나온 목적파일을 기계어로 바꾸는 과정이다.
따라서 실제 여러 파일이 어떻게 하나의 실행코드로 나오는지 

목적파일의 심볼과 심볼테이블, 동적 라이브러리의 링커 동작을 알려준다.




8 예외처리 제어흐름

실제 문제가 생겼을때 시스템단에서 어떻게 처리하는지를 나타낸다.

커맨드라인에서 명령어 처리,키보드 입력처리같은것도나옴.


9 가상 메모리
6에 이어서 가상 메모리 개념과 TLB가 내용이다. 
cpu와 메모리의 전체적인 작동에 대해서 이해를 할 수 있다.
컴구와 내용이같다.

10 시스템 수준 입출력
시스템단 Unix I/O를 알려준다.
이 장은 최종적으로 이를 사용해서 쓰레드 세이프한 RIO I/O를 설계한다. 
11 네트워크 프로그래밍

리눅스 네트워크용 함수와 RIO I/O를 사용해서 웹서버-클라이언트를 설계한다.

12 동시성 프로그래밍
리눅스 쓰레드 함수와 앞에서 설계한 웹서버를 다중화 설계를 한다.
기본 개념에서 시작해서 설계를 하고 설계시나오는 문제점(데드락)을 짚은후 세마포어로 이를 고치는 것까지한다.




도움되었던 챕터. 

3,
4
6
7
9

3은 어셈
4,6,8은 컴구내용으로 학습하기 용이했음
링커파트는 완전 새로접하는 내용이었는데 실제 컴파일러가 어떻게 굴러가는지 이해하는데 정말 도움 많이됬다.

도움안되거나, 얻어갈게있음에도 학습이 모자란것.
2
5
8
10
11
12
뇌에 남는것도 별로 없고 읽을때도 대부분 아 그렇구나. 하면서 넘어감